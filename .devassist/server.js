#!/usr/bin/env node

/**
 * Prjctzr DevAssist MCP Server for Claude Code
 * Project-isolated instance with custom commands
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { CallToolRequestSchema, ListToolsRequestSchema } from '@modelcontextprotocol/sdk/types.js';
import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs/promises';

const execAsync = promisify(exec);

const PROJECT_NAME = 'Prjctzr';
const PROJECT_PATH = '/Users/danielconnolly/Projects/Prjctzr';

// Set up project isolation - NO generic DevAssist
process.env.DEVASSIST_PROJECT = PROJECT_NAME;
process.env.DEVASSIST_PROJECT_PATH = PROJECT_PATH;
process.env.DEVASSIST_DATA_PATH = PROJECT_PATH + '/.devassist/data';

// Import main DevAssist but run in isolated mode
import('/Users/danielconnolly/Projects/Custom_MCP/DevAssist_MCP/index.js').then(async (devassist) => {
  // Server is ready
  console.error(`üöÄ Prjctzr DevAssist Ready (Claude Code)`);
});

// Create project-specific server
const server = new Server({
  name: 'prjctzr-devassist',
  version: '1.0.0',
}, {
  capabilities: { tools: {} },
});

// Project-specific tools (these become slash commands in Claude Code)
const tools = [
  {
    name: 'start-prjctzr',
    description: 'Start Prjctzr session with warmup',
    inputSchema: { type: 'object', properties: {} },
  },
  {
    name: 'end-prjctzr',
    description: 'End Prjctzr session with cleanup',
    inputSchema: { type: 'object', properties: {} },
  },
  {
    name: 'status-prjctzr',
    description: 'Check Prjctzr status',
    inputSchema: { type: 'object', properties: {} },
  },
  {
    name: 'initproject',
    description: 'Initialize DevAssist for a new project with isolated commands',
    inputSchema: { 
      type: 'object', 
      properties: {
        projectPath: {
          type: 'string',
          description: 'Path to the project to initialize'
        },
        projectName: {
          type: 'string',
          description: 'Name of the project (for commands like /start-projectname)'
        },
        githubAccount: {
          type: 'string',
          description: 'GitHub account to use: PROACTIVA-US or PerformanceSuite (default: PerformanceSuite)',
          enum: ['PROACTIVA-US', 'PerformanceSuite'],
          default: 'PerformanceSuite'
        }
      },
      required: ['projectPath', 'projectName']
    },
  },
];

server.setRequestHandler(ListToolsRequestSchema, async () => ({ tools }));

server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;
  console.error(`[Prjctzr DevAssist] ${name}`);
  
  // Handle project-specific commands
  switch (name) {
    case 'start-prjctzr':
      await execAsync(`node ${PROJECT_PATH}/.devassist/warmup.js`).catch(() => {});
      return {
        content: [{
          type: 'text',
          text: `üî• Prjctzr DevAssist Session Started!
          
‚úÖ Warmup complete
‚úÖ Context loaded
‚úÖ Indices ready
‚úÖ AI primed for Prjctzr

Your project-isolated environment is ready!`
        }]
      };
    
    case 'end-prjctzr':
      await execAsync(`node ${PROJECT_PATH}/.devassist/agents/cleanup.js`).catch(() => {});
      return {
        content: [{
          type: 'text',
          text: `üèÅ Prjctzr DevAssist Session Ended!
          
‚úÖ Cleanup complete
‚úÖ Context saved
‚úÖ Ready for next session`
        }]
      };
      
    case 'status-prjctzr':
      return {
        content: [{
          type: 'text',
          text: `üìä Prjctzr Status
          
Project: ${PROJECT_NAME}
Path: ${PROJECT_PATH}
Data: ${process.env.DEVASSIST_DATA_PATH}
Session: Active`
        }]
      };
      
    case 'initproject':
      // This is the key command that creates project-specific DevAssist instances
      const { projectPath, projectName, githubAccount = 'PerformanceSuite' } = args;
      
      try {
        // Create DevAssist structure for the new project
        const devassistPath = `${projectPath}/.devassist`;
        await fs.mkdir(devassistPath, { recursive: true });
        await fs.mkdir(`${devassistPath}/data`, { recursive: true });
        await fs.mkdir(`${devassistPath}/knowledge`, { recursive: true });
        await fs.mkdir(`${devassistPath}/sessions`, { recursive: true });
        await fs.mkdir(`${devassistPath}/agents`, { recursive: true });
        
        // Create the project-specific server
        const serverContent = `#!/usr/bin/env node

/**
 * ${projectName} DevAssist MCP Server
 * Auto-generated by Prjctzr
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { CallToolRequestSchema, ListToolsRequestSchema } from '@modelcontextprotocol/sdk/types.js';
import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs/promises';

const execAsync = promisify(exec);

const PROJECT_NAME = '${projectName}';
const PROJECT_PATH = '${projectPath}';

// Set up project isolation
process.env.DEVASSIST_PROJECT = PROJECT_NAME;
process.env.DEVASSIST_PROJECT_PATH = PROJECT_PATH;
process.env.DEVASSIST_DATA_PATH = PROJECT_PATH + '/.devassist/data';

// Import main DevAssist in isolated mode
import('/Users/danielconnolly/Projects/Custom_MCP/DevAssist_MCP/index.js').then(async (devassist) => {
  console.error(\`üöÄ \${PROJECT_NAME} DevAssist Ready\`);
});

// Create project-specific server
const server = new Server({
  name: '${projectName.toLowerCase()}-devassist',
  version: '1.0.0',
}, {
  capabilities: { tools: {} },
});

// Project-specific tools
const tools = [
  {
    name: 'start-${projectName.toLowerCase()}',
    description: 'Start ${projectName} session with warmup',
    inputSchema: { type: 'object', properties: {} },
  },
  {
    name: 'end-${projectName.toLowerCase()}',
    description: 'End ${projectName} session with cleanup',
    inputSchema: { type: 'object', properties: {} },
  },
  {
    name: 'status-${projectName.toLowerCase()}',
    description: 'Check ${projectName} status',
    inputSchema: { type: 'object', properties: {} },
  },
];

server.setRequestHandler(ListToolsRequestSchema, async () => ({ tools }));

server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name } = request.params;
  console.error(\`[\${PROJECT_NAME} DevAssist] \${name}\`);
  
  switch (name) {
    case 'start-${projectName.toLowerCase()}':
      await execAsync(\`node \${PROJECT_PATH}/.devassist/warmup.js\`).catch(() => {});
      return {
        content: [{
          type: 'text',
          text: \`üî• \${PROJECT_NAME} DevAssist Session Started!
          
‚úÖ Warmup complete
‚úÖ Context loaded
‚úÖ Ready for development\`
        }]
      };
    
    case 'end-${projectName.toLowerCase()}':
      return {
        content: [{
          type: 'text',
          text: \`üèÅ \${PROJECT_NAME} DevAssist Session Ended!\`
        }]
      };
      
    case 'status-${projectName.toLowerCase()}':
      return {
        content: [{
          type: 'text',
          text: \`üìä \${PROJECT_NAME} Status: Active\`
        }]
      };
      
    default:
      return { content: [{ type: 'text', text: \`[\${PROJECT_NAME}] \${name}\` }] };
  }
});

const transport = new StdioServerTransport();
await server.connect(transport);
console.error(\`\${PROJECT_NAME} DevAssist MCP Server running\`);
`;
        
        await fs.writeFile(`${devassistPath}/server.js`, serverContent);
        
        // Create package.json
        const packageJson = {
          name: `${projectName.toLowerCase()}-devassist`,
          version: "1.0.0",
          type: "module",
          dependencies: {
            "@modelcontextprotocol/sdk": "^1.0.0"
          }
        };
        
        await fs.writeFile(`${devassistPath}/package.json`, JSON.stringify(packageJson, null, 2));
        
        // Create .no-generic marker
        await fs.writeFile(`${devassistPath}/.no-generic`, `Project-specific DevAssist for ${projectName}`);
        
        // Create basic warmup.js
        const warmupContent = `#!/usr/bin/env node
console.log('üî• ${projectName} Warmup...');
console.log('‚úÖ Warmup complete');
`;
        await fs.writeFile(`${devassistPath}/warmup.js`, warmupContent);
        
        // Create MCP config for the project
        const mcpConfig = {
          mcpServers: {
            [`devassist-${projectName.toLowerCase()}`]: {
              command: "node",
              args: [`${projectPath}/.devassist/server.js`],
              env: {
                PROJECT_ROOT: projectPath,
                PROJECT_NAME: projectName,
                DEVASSIST_DATA_PATH: `${projectPath}/.devassist/data`
              }
            }
          }
        };
        
        await fs.writeFile(`${projectPath}/.mcp.json`, JSON.stringify(mcpConfig, null, 2));
        
        // Install dependencies
        await execAsync(`cd ${devassistPath} && npm install`);
        
        // Configure Git for this project
        const gitUser = githubAccount === 'PROACTIVA-US' ? 'PROACTIVA-US' : 'PerformanceSuite';
        const gitEmail = githubAccount === 'PROACTIVA-US' ? 'info@proactiva.us' : 'danieldconnolly@gmail.com';
        
        try {
          await execAsync(`cd ${projectPath} && git config user.name "${gitUser}"`);
          await execAsync(`cd ${projectPath} && git config user.email "${gitEmail}"`);
          
          // Create a marker file for the GitHub account
          await fs.writeFile(`${projectPath}/.github-account`, `# GitHub Account: ${githubAccount}\n`);
        } catch (gitError) {
          // Not a git repo yet, that's OK
          console.error('Note: Git config not set (not a git repo yet)');
        }
        
        return {
          content: [{
            type: 'text',
            text: `‚úÖ DevAssist initialized for ${projectName}!

üîê GitHub Account: ${githubAccount}
   User: ${gitUser}
   Email: ${gitEmail}

Created structure:
${devassistPath}/
‚îú‚îÄ‚îÄ server.js (MCP server)
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ warmup.js
‚îú‚îÄ‚îÄ .no-generic
‚îú‚îÄ‚îÄ data/
‚îú‚îÄ‚îÄ knowledge/
‚îú‚îÄ‚îÄ sessions/
‚îî‚îÄ‚îÄ agents/

MCP config created at: ${projectPath}/.mcp.json

Commands available:
- /start-${projectName.toLowerCase()}
- /end-${projectName.toLowerCase()}
- /status-${projectName.toLowerCase()}

To activate:
1. Restart Claude Code
2. Commands will appear when typing "/"

Project is ready for isolated DevAssist operations!`
          }]
        };
        
      } catch (error) {
        return {
          content: [{
            type: 'text',
            text: `‚ùå Error initializing project: ${error.message}`
          }]
        };
      }
      
    default:
      return { content: [{ type: 'text', text: `[Prjctzr] Unknown command: ${name}` }] };
  }
});

const transport = new StdioServerTransport();
await server.connect(transport);

console.error('Prjctzr DevAssist MCP Server running');
